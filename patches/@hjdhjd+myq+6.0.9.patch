diff --git a/node_modules/@hjdhjd/myq/dist/myq-api.js b/node_modules/@hjdhjd/myq/dist/myq-api.js
index 2620755..c4c3ab2 100644
--- a/node_modules/@hjdhjd/myq/dist/myq-api.js
+++ b/node_modules/@hjdhjd/myq/dist/myq-api.js
@@ -1,18 +1,18 @@
 "use strict";
-var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
+var __createBinding = (this && this.__createBinding) || (Object.create ? (function (o, m, k, k2) {
     if (k2 === undefined) k2 = k;
     var desc = Object.getOwnPropertyDescriptor(m, k);
     if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
-      desc = { enumerable: true, get: function() { return m[k]; } };
+        desc = { enumerable: true, get: function () { return m[k]; } };
     }
     Object.defineProperty(o, k2, desc);
-}) : (function(o, m, k, k2) {
+}) : (function (o, m, k, k2) {
     if (k2 === undefined) k2 = k;
     o[k2] = m[k];
 }));
-var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
+var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function (o, v) {
     Object.defineProperty(o, "default", { enumerable: true, value: v });
-}) : function(o, v) {
+}) : function (o, v) {
     o["default"] = v;
 });
 var __importStar = (this && this.__importStar) || function (mod) {
@@ -88,7 +88,7 @@ const util_1 = __importDefault(require("util"));
  */
 class myQApi {
     // Initialize this instance with our login information.
-    constructor(email, password, log) {
+    constructor(email, password, log, region) {
         // If we didn't get passed a logging parameter, by default we log to the console.
         if (!log) {
             log = {
@@ -104,6 +104,7 @@ class myQApi {
         this.accessToken = null;
         this.accounts = [];
         this.email = email;
+        this.region = region || 'east';
         this.headers = new node_fetch_cjs_1.Headers();
         this.log = log;
         this.password = password;
@@ -115,7 +116,7 @@ class myQApi {
     }
     // Transmit the PKCE challenge and retrieve the myQ OAuth authorization page to prepare to login.
     async oauthGetAuthPage(codeChallenge) {
-        const authEndpoint = new URL("https://partner-identity.myq-cloud.com/connect/authorize");
+        const authEndpoint = new URL(`https://partner-identity-${this.region}.myq-cloud.com/connect/authorize`);
         // Set the client identifier.
         authEndpoint.searchParams.set("client_id", "IOS_CGI_MYQ");
         // Set the PKCE code challenge.
@@ -232,7 +233,7 @@ class myQApi {
         });
         // Now we execute the final login redirect that will validate the PKCE challenge and
         // return our access and refresh tokens.
-        response = await this.fetch("https://partner-identity.myq-cloud.com/connect/token", {
+        response = await this.fetch(`https://partner-identity-${this.region}.myq-cloud.com/connect/token`, {
             body: requestBody.toString(),
             headers: {
                 "Content-Type": "application/x-www-form-urlencoded",
@@ -271,7 +272,7 @@ class myQApi {
             "scope": this.tokenScope
         });
         // Execute the refresh token request.
-        const response = await this.fetch("https://partner-identity.myq-cloud.com/connect/token", {
+        const response = await this.fetch(`https://partner-identity-${this.region}.myq-cloud.com/connect/token`, {
             body: requestBody.toString(),
             headers: {
                 "Content-Type": "application/x-www-form-urlencoded",
@@ -393,7 +394,7 @@ class myQApi {
         for (const accountId of this.accounts) {
             // Get the list of device information for this account.
             // eslint-disable-next-line no-await-in-loop
-            const response = await this.fetch("https://devices.myq-cloud.com/api/v5.2/Accounts/" + accountId + "/Devices");
+            const response = await this.fetch(`https://devices-${this.region}.myq-cloud.com/api/v5.2/Accounts/` + accountId + "/Devices");
             if (!response) {
                 this.log.error("myQ API: Unable to update device status from the myQ API. Acquiring a new access token.");
                 this.accessToken = null;
@@ -442,12 +443,12 @@ class myQApi {
         // Ensure we cann the right endpoint to execute commands depending on device family.
         if (device.device_family === "lamp") {
             // Execute a command on a lamp device.
-            response = await this.fetch("https://account-devices-lamp.myq-cloud.com/api/v5.2/Accounts/" + device.account_id +
+            response = await this.fetch(`https://account-devices-lamp-${this.region}.myq-cloud.com/api/v5.2/Accounts/` + device.account_id +
                 "/lamps/" + device.serial_number + "/" + command, { method: "PUT" });
         }
         else {
             // By default, we assume we're targeting a garage door opener.
-            response = await this.fetch("https://account-devices-gdo.myq-cloud.com/api/v5.2/Accounts/" + device.account_id +
+            response = await this.fetch(`https://account-devices-gdo-${this.region}.myq-cloud.com/api/v5.2/Accounts/` + device.account_id +
                 "/door_openers/" + device.serial_number + "/" + command, { method: "PUT" });
         }
         // Check for errors.
@@ -462,7 +463,7 @@ class myQApi {
     // Get our myQ account information.
     async getAccounts() {
         // Get the account information.
-        const response = await this.fetch("https://accounts.myq-cloud.com/api/v6.0/accounts");
+        const response = await this.fetch(`https://accounts-${this.region}.myq-cloud.com/api/v6.0/accounts`);
         if (!response) {
             this.log.error("myQ API: Unable to retrieve account information.");
             return false;
